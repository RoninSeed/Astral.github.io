<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客运营指南</title>
    <url>/Astral.github.io/2024/01/13/Hexo%E8%BF%90%E8%90%A5%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>就是不会多百度，多去思考和尝试，大不了重建！</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA的自我修炼</title>
    <url>/Astral.github.io/2024/01/13/JAVA%E4%B8%80%E5%AD%A6%E5%88%B0%E5%BA%95/</url>
    <content><![CDATA[<h2 id="我的第一个-JAVA-程序"><a href="#我的第一个-JAVA-程序" class="headerlink" title="我的第一个 JAVA 程序"></a>我的第一个 JAVA 程序</h2><p>创建文件 <strong>HelloWorld.java(文件名需与类名一致)</strong>, 代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ javac HelloWorld.java</span><br><span class="line">$ java HelloWorld</span><br><span class="line">Hello World</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="执行命令解析："><a href="#执行命令解析：" class="headerlink" title="执行命令解析："></a>执行命令解析：</h4><p>以上我们使用了两个命令 <strong>javac</strong> 和 <strong>java</strong>。</p>
<p><strong>javac</strong> 后面跟着的是java文件的文件名，例如 HelloWorld.java。 该命令用于将 java 源文件编译为 class 字节码文件，如： <strong>javac HelloWorld.java</strong>。</p>
<p>运行javac命令后，如果成功编译没有错误的话，会出现一个 HelloWorld.class 的文件。</p>
<p><strong>java</strong> 后面跟着的是java文件中的类名,例如 HelloWorld 就是类名，如: java HelloWorld。</p>
<p><strong>注意</strong>：java命令后面不要加.class。</p>
<h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ul>
<li><p><strong>Java 语言是简单的：</strong></p>
<p>Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。</p>
</li>
<li><p><strong>Java 语言是面向对象的：</strong></p>
<p>Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。</p>
</li>
<li><p><strong>Java语言是分布式的：</strong></p>
<p>Java 语言支持 Internet 应用的开发，在基本的 Java 应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括 URL、URLConnection、Socket、ServerSocket 等。Java 的 RMI（远程方法激活）机制也是开发分布式应用的重要手段。</p>
</li>
<li><p>Java 语言是健壮的：</p>
<p>Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证。对指针的丢弃是 Java 的明智选择。Java 的安全检查机制使得 Java 更具健壮性。</p>
</li>
<li><p><strong>Java语言是安全的：</strong></p>
<p>Java通常被用在网络环境中，为此，Java 提供了一个安全机制以防恶意代码的攻击。除了Java 语言具有的许多安全特性以外，Java 对通过网络下载的类具有一个安全防范机制（类 ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类 SecurityManager）让 Java 应用设置安全哨兵。</p>
</li>
<li><p><strong>Java 语言是体系结构中立的：</strong></p>
<p>Java 程序（后缀为 java 的文件）在 Java 平台上被编译为体系结构中立的字节码格式（后缀为 class 的文件），然后可以在实现这个 Java 平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。</p>
</li>
<li><p><strong>Java 语言是可移植的：</strong></p>
<p>这种可移植性来源于体系结构中立性，另外，Java 还严格规定了各个基本数据类型的长度。Java 系统本身也具有很强的可移植性，Java 编译器是用 Java 实现的，Java 的运行环境是用 ANSI C 实现的。</p>
</li>
<li><p><strong>Java 语言是解释型的：</strong></p>
<p>如前所述，Java 程序在 Java 平台上被编译为字节码格式，然后可以在实现这个 Java 平台的任何系统中运行。在运行时，Java 平台中的 Java 解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。</p>
</li>
<li><p><strong>Java 是高性能的：</strong></p>
<p>与那些解释型的高级脚本语言相比，Java 的确是高性能的。事实上，Java 的运行速度随着 JIT(Just-In-Time）编译器技术的发展越来越接近于 C++。</p>
</li>
<li><p><strong>Java 语言是多线程的：</strong></p>
<p>在 Java 语言中，线程是一种特殊的对象，它必须由 Thread 类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为 Thread(Runnable) 的构造子类将一个实现了 Runnable 接口的对象包装成一个线程，其二，从 Thread 类派生出子类并重写 run 方法，使用该子类创建的对象即为线程。值得注意的是 Thread 类已经实现了 Runnable 接口，因此，任何一个线程均有它的 run 方法，而 run 方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java 语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为 synchronized）。</p>
</li>
<li><p><strong>Java 语言是动态的：</strong></p>
<p>Java 语言的设计目标之一是适应于动态变化的环境。Java 程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java 中的类有一个运行时刻的表示，能进行运行时刻的类型检查。</p>
</li>
</ul>
<h2 id="Java-关键字"><a href="#Java-关键字" class="headerlink" title="Java 关键字"></a>Java 关键字</h2><p>下面列出了 Java 关键字。这些保留字不能用于常量、变量、和任何标识符的名称。</p>
<table>
<thead>
<tr>
<th align="left">类别</th>
<th align="left">关键字</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">访问控制</td>
<td align="left">private</td>
<td align="left">私有的</td>
</tr>
<tr>
<td align="left">protected</td>
<td align="left">受保护的</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">public</td>
<td align="left">公共的</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">default</td>
<td align="left">默认</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">类、方法和变量修饰符</td>
<td align="left">abstract</td>
<td align="left">声明抽象</td>
</tr>
<tr>
<td align="left">class</td>
<td align="left">类</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">extends</td>
<td align="left">扩充、继承</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">final</td>
<td align="left">最终值、不可改变的</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">implements</td>
<td align="left">实现（接口）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">interface</td>
<td align="left">接口</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">native</td>
<td align="left">本地、原生方法（非 Java 实现）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">new</td>
<td align="left">创建</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">static</td>
<td align="left">静态</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">strictfp</td>
<td align="left">严格浮点、精准浮点</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">synchronized</td>
<td align="left">线程、同步</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">transient</td>
<td align="left">短暂</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">volatile</td>
<td align="left">易失</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">程序控制语句</td>
<td align="left">break</td>
<td align="left">跳出循环</td>
</tr>
<tr>
<td align="left">case</td>
<td align="left">定义一个值以供 switch 选择</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">continue</td>
<td align="left">继续</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">do</td>
<td align="left">运行</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">else</td>
<td align="left">否则</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">for</td>
<td align="left">循环</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">if</td>
<td align="left">如果</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">instanceof</td>
<td align="left">实例</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">return</td>
<td align="left">返回</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">switch</td>
<td align="left">根据值选择执行</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">while</td>
<td align="left">循环</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">错误处理</td>
<td align="left">assert</td>
<td align="left">断言表达式是否为真</td>
</tr>
<tr>
<td align="left">catch</td>
<td align="left">捕捉异常</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">finally</td>
<td align="left">有没有异常都执行</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">throw</td>
<td align="left">抛出一个异常对象</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">throws</td>
<td align="left">声明一个异常可能被抛出</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">try</td>
<td align="left">捕获异常</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">包相关</td>
<td align="left">import</td>
<td align="left">引入</td>
</tr>
<tr>
<td align="left">package</td>
<td align="left">包</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">基本类型</td>
<td align="left">boolean</td>
<td align="left">布尔型</td>
</tr>
<tr>
<td align="left">byte</td>
<td align="left">字节型</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">字符型</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">双精度浮点</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">单精度浮点</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">整型</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">长整型</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">短整型</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">变量引用</td>
<td align="left">super</td>
<td align="left">父类、超类</td>
</tr>
<tr>
<td align="left">this</td>
<td align="left">本类</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">void</td>
<td align="left">无返回值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">保留关键字</td>
<td align="left">goto</td>
<td align="left">是关键字，但不能使用</td>
</tr>
<tr>
<td align="left">const</td>
<td align="left">是关键字，但不能使用</td>
<td align="left"></td>
</tr>
</tbody></table>
<p><strong>注意：</strong>Java 的 null 不是关键字，类似于 true 和 false，它是一个字面常量，不允许作为标识符使用。</p>
<hr>
<h2 id="Java注释"><a href="#Java注释" class="headerlink" title="Java注释"></a>Java注释</h2><p>类似于 C&#x2F;C++、Java 也支持单行以及多行注释。</p>
<p>注释中的字符将被 Java 编译器忽略。</p>
<p>public class HelloWorld {   &#x2F;* 这是第一个Java程序    * 它将输出 Hello World    * 这是一个多行注释的示例    <em>&#x2F;    public static void main(String[] args){       &#x2F;&#x2F; 这是单行注释的示例       &#x2F;</em> 这个也是单行注释的示例 *&#x2F;       System.out.println(“Hello World”);     } }</p>
<p><img src="/Astral.github.io/upload/image-20240310150906900.png" alt="image-20240310150906900" loading="lazy"></p>
]]></content>
      <categories>
        <category>程序语言</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn学习笔记</title>
    <url>/Astral.github.io/2024/01/06/pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h2><h3 id="1-RELRO（ReLocation-Read-Only）："><a href="#1-RELRO（ReLocation-Read-Only）：" class="headerlink" title="1.RELRO（ReLocation Read-Only）："></a>1.RELRO（ReLocation Read-Only）：</h3><p>分为两种情况，第一种情况是Partial RELRO，这种情况是部分开启堆栈地址随机化，got表可写，第二种，Full RELRO是全部开启，got表不可写，Got表是全局偏移表，里面包含的是外部定义的符号相应的条目的数据段中，PLT表，是过程链接表&#x2F;内部函数表，linux延迟绑定，但是最后还是要连接到Got，PLT表只是为一个过渡的作用。</p>
<h3 id="2-Stack（canary）："><a href="#2-Stack（canary）：" class="headerlink" title="2.Stack（canary）："></a>2.Stack（canary）：</h3><p>这个保护其实就是在你调用的函数的时候，在栈帧中插入一个随机数，在函数执行完成返回之前，来校验随机数是否被改变，来判断是否被栈溢出，这个我们也俗称为canary（金丝雀），栈保护技术。</p>
<h3 id="3-NX（no-execute）："><a href="#3-NX（no-execute）：" class="headerlink" title="3.NX（no execute）："></a>3.NX（no execute）：</h3><p>为栈不可执行，也就是栈上的数据不可以当作代码区执行的作用。</p>
<h3 id="4-PIE（Position-Independent-Executable）："><a href="#4-PIE（Position-Independent-Executable）：" class="headerlink" title="4.PIE（Position Independent Executable）："></a>4.PIE（Position Independent Executable）：</h3><p>PIE的中文叫做，地址无关可执行文件，是针对.text（代码段），.data（数据段），.bss（未初始化全局变量段）来做的保护，正常每一次加载程序，加载地址是固定的，但是PIE保护开启，每次程序启动的时候都会变换加载地址。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">objdump -d -M Intel ./程序 | grep 字符串    （查看该字符串地址）</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">shellcode=<span class="keyword">asm</span>(shellcraft.sh())           shellcraft.sh() 用于生成一个执行 /bin/sh 的 shellcode，即一个可用于获取一个交互式 shell 的机器                                            码。而 <span class="keyword">asm</span>() 函数则用于将生成的汇编代码转换为二进制形式的机器码，以便后续在漏洞利用或系统攻击中使用。</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x /$rbp 查看rbp地址 →利用地址后八位可计算到rbp的偏移量</span><br><span class="line">x /数字gx 可查看多行内容</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_devel = <span class="string">&#x27;debug&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.bss字段 可读可写</span><br><span class="line">readelf -S ./程序 | grep .bss 查找可读写的字段</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cyclic -l + 地址 可计算偏移量（用于动态调试）</span><br><span class="line">gdb.attach(r) #用于本地调试时启动GDB，写入脚本中, r取决于命名</span><br><span class="line">cyclic(数字) 生成一定数量的字符串</span><br><span class="line">sleep（<span class="number">1</span>/<span class="number">2</span>/<span class="number">3</span>/...） 令进程暂时停止，可执行其他指令    </span><br><span class="line">hex（）转换成<span class="number">16</span>进制</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pattern offset + 地址 （程序崩溃时计算偏移量）</span><br></pre></td></tr></table></figure>



<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h3 id="C语言-汇编语言-python-操作系统-Linux系统管理-计算机网络原理"><a href="#C语言-汇编语言-python-操作系统-Linux系统管理-计算机网络原理" class="headerlink" title="C语言  汇编语言   python   操作系统  Linux系统管理  计算机网络原理"></a>C语言  汇编语言   python   操作系统  Linux系统管理  计算机网络原理</h3><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h3 id="IDApro-GDB-pwntools-pwndbg"><a href="#IDApro-GDB-pwntools-pwndbg" class="headerlink" title="IDApro  GDB  pwntools  pwndbg"></a>IDApro  GDB  pwntools  pwndbg</h3><h1 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h1><ol>
<li><h4 id="设置断点和调试："><a href="#设置断点和调试：" class="headerlink" title="设置断点和调试："></a><strong>设置断点和调试</strong>：</h4><ul>
<li><code>pwngef</code>：启动 PWNGDB 插件</li>
<li><code>pie breakpoint</code>：在 PIE 可执行文件中设置断点</li>
<li><code>b main</code>：在 <code>main</code> 函数处设置断点</li>
<li><code>r</code>：启动程序并运行</li>
<li><code>continue</code> 或 <code>c</code>：继续执行程序</li>
<li><code>next</code> 或 <code>n</code>：执行下一条指令</li>
<li><code>step</code> 或 <code>s</code>：单步调试</li>
</ul>
</li>
<li><h3 id="寄存器查看和修改："><a href="#寄存器查看和修改：" class="headerlink" title="寄存器查看和修改："></a><strong>寄存器查看和修改</strong>：</h3><ul>
<li><code>context</code>：显示当前的上下文信息</li>
<li><code>registers</code> 或 <code>r</code>：显示所有寄存器的值</li>
<li><code>x/20gx $rsp</code>：以十六进制格式显示栈帧中的前 20 个 QWORD</li>
<li><code>set $rax = 10</code>：修改 <code>$rax</code> 寄存器的值</li>
</ul>
</li>
<li><h3 id="内存查看和修改："><a href="#内存查看和修改：" class="headerlink" title="内存查看和修改："></a><strong>内存查看和修改</strong>：</h3><ul>
<li><code>heap</code>：显示堆块的信息</li>
<li><code>vmmap</code>：显示内存映射信息</li>
<li><code>x/16gx 0x601000</code>：以十六进制格式显示地址 <code>0x601000</code> 处的 16 个 QWORD</li>
<li><code>set *(long *)0x601000 = 0xDEADBEEF</code>：修改地址 <code>0x601000</code> 处的值为 <code>0xDEADBEEF</code></li>
</ul>
</li>
<li><h3 id="快速搜索和模式识别："><a href="#快速搜索和模式识别：" class="headerlink" title="快速搜索和模式识别："></a><strong>快速搜索和模式识别</strong>：</h3><ul>
<li><code>search /bin/sh</code>：搜索可执行文件中的字符串 <code>/bin/sh</code></li>
<li><code>find 0xdeadbeef</code>：查找地址 <code>0xdeadbeef</code> 在哪个模块中</li>
<li><code>patto</code>：进行模式匹配</li>
</ul>
</li>
<li><h3 id="ROP-链和漏洞利用："><a href="#ROP-链和漏洞利用：" class="headerlink" title="ROP 链和漏洞利用："></a><strong>ROP 链和漏洞利用</strong>：</h3><ul>
<li><code>rop</code>：显示当前的 ROP 链</li>
<li><code>rop --clear</code>：清空 ROP 链</li>
<li><code>rop --call system</code>：添加调用 <code>system()</code> 函数的 gadget 到 ROP 链</li>
</ul>
</li>
<li><h3 id="其他实用工具："><a href="#其他实用工具：" class="headerlink" title="其他实用工具："></a><strong>其他实用工具</strong>：</h3><ul>
<li><code>context</code>：设置 pwntools 的上下文环境</li>
<li><code>shellcraft</code>：生成 shellcode</li>
<li><code>hexdump</code>：以十六进制格式打印数据</li>
</ul>
</li>
</ol>
<p>GDB调试结果各部分</p>
<p>————————————————————[REGISTERS]————————————————————————</p>
<p>寄存器（Registers）是位于CPU内部的一组高速存储器单元。寄存器用于存储和处理指令执行过程中的数据、地址和控制信息。</p>
<p>───────────────────────────——─[DISASM]─——————────────────────────────────</p>
<p>DISASM是指反汇编（Disassembly）的过程，它将机器码（二进制代码）转换回可读的汇编语言表示形式。反汇编器（Disassembler）是执行这一过程的工具或程序。</p>
<p>——————————————————————SOURCE (CODE)——————————————————————-</p>
<p>源代码（Source code）是计算机程序的人类可读形式，通常使用文字编写的一系列指令和声明。它是软件开发过程中的重要组成部分，用于描述程序的逻辑、功能和行为。</p>
<p>——————————————————————STACK———————————————————————————— </p>
<p>栈（Stack）是一种数据结构，它具有<strong>后进先出</strong>（Last In First Out，简称LIFO）的特性，也就是最后进入的元素首先被取出。</p>
<p>在计算机科学中，栈通常用于存储临时数据和函数调用信息。当一个函数被调用时，它的参数和返回地址等信息会被压入栈中，当函数执行完毕后，这些信息会被弹出栈。</p>
<p>栈有两个基本操作：压入（Push）和弹出（Pop）。当新元素被压入栈时，它被放置在栈顶；当元素被弹出栈时，它被移除并返回到调用者。栈还支持访问栈顶元素的操作，但不允许在非栈顶位置插入或删除元素。</p>
<p>————————————————————BACKTRACE———————————————————————————</p>
<p>回溯（Backtrace）是一种递归的算法，通过尝试不同的选择来解决问题。回溯算法通常用于在搜索空间中找到所有或特定数量的解。</p>
<p>回溯算法的基本思想是：从问题的初始状态开始，通过尝试每个可能的选择，逐步地向解决方案前进。如果某个选择不能够得到解决方案，就会返回到上一个状态并尝试其他选择。这个过程会一直重复，直到找到解决方案或者无法再尝试任何选择为止。</p>
<p>回溯算法通常用递归函数来实现。在递归调用中，程序会先尝试一个选择，然后递归调用自身来处理子问题。如果子问题能够得到解决方案，就会返回真值；否则，程序会撤销当前选择，并尝试其他选择。当所有选择都尝试完毕后，如果依然没有找到解决方案，就返回假值。</p>
<p>在 GDB 中进行调试通常遵循以下一般流程：</p>
<ol>
<li><p><strong>编译程序时启用调试信息</strong>：在使用 GCC 或其他编译器编译程序时，需要添加 <code>-g</code> 选项以包含调试信息。例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">复制代码gcc -g -o program program.c</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动 GDB</strong>：在命令行中输入 <code>gdb program</code> 来启动 GDB 并加载要调试的程序。</p>
</li>
<li><p><strong>设置断点</strong>：通过在感兴趣的位置设置断点，可以指示 GDB 在执行到该位置时停下来。可以使用 <code>break</code> 命令设置断点，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">复制代码<span class="keyword">break</span> main</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>运行程序</strong>：输入 <code>run</code> 命令来运行程序，直到遇到设置的断点或程序结束。</p>
</li>
<li><p><strong>逐步执行程序</strong>：一旦程序停在断点处，可以使用 <code>step</code> 命令逐步执行程序，逐行查看程序的执行过程，并检查变量的值和程序状态。</p>
</li>
<li><p><strong>观察变量和内存</strong>：使用 <code>print</code> 命令来查看变量的值，使用 <code>display</code> 命令设置要自动显示的表达式，使用 <code>x</code> 命令查看内存中的内容。</p>
</li>
<li><p><strong>继续执行</strong>：使用 <code>continue</code> 命令让程序继续执行，直到再次遇到断点或程序结束。</p>
</li>
<li><p><strong>跟踪函数调用</strong>：使用 <code>step</code> 命令进入函数内部进行单步执行，或使用 <code>next</code> 命令跳过函数内部的单步执行。</p>
</li>
<li><p><strong>处理异常情况</strong>：如果程序出现异常，如段错误或断言失败，GDB 会停止程序并显示相关的调试信息，帮助你定位问题所在。</p>
</li>
<li><p><strong>退出 GDB</strong>：当调试结束时，可以输入 <code>quit</code> 命令退出 GDB。</p>
</li>
</ol>
<h1 id="IDApro"><a href="#IDApro" class="headerlink" title="IDApro"></a>IDApro</h1><p>快捷键<br>Tab     切换<br>空格    看IDA地址<br>N       改函数名字<br>&#x2F;       进行备注<br>F5      看伪代码<br>shift+F12     看字符串<br>Esc           返回上一步<br>ctrl+x        查看一下哪里调用了这个字符串<br>g             输入地址，可以跳转到地址位置</p>
<ol>
<li><h3 id="导航和查看："><a href="#导航和查看：" class="headerlink" title="导航和查看："></a><strong>导航和查看</strong>：</h3><ul>
<li><code>Ctrl + N</code>：打开新文件</li>
<li><code>Ctrl + O</code>：打开已有文件</li>
<li><code>Ctrl + F</code>：搜索</li>
<li><code>Ctrl + G</code>：跳转到指定地址</li>
<li><code>Space</code>：反汇编窗口中显示下一个指令</li>
<li><code>Esc</code>：取消当前操作</li>
</ul>
</li>
<li><h3 id="分析和反汇编："><a href="#分析和反汇编：" class="headerlink" title="分析和反汇编："></a><strong>分析和反汇编</strong>：</h3><ul>
<li><code>Alt + P</code>：进行自动分析</li>
<li><code>D</code>：将数据解码为十六进制</li>
<li><code>C</code>：将代码解码为汇编指令</li>
<li><code>X</code>：进行交叉引用查找</li>
<li><code>Y</code>：查看函数调用图</li>
<li><code>F5</code>：刷新视图</li>
</ul>
</li>
<li><h3 id="注释和标记："><a href="#注释和标记：" class="headerlink" title="注释和标记："></a><strong>注释和标记</strong>：</h3><ul>
<li><code>;</code>：添加单行注释</li>
<li><code>Alt + Shift + A</code>：添加多行注释</li>
<li><code>N</code>：添加名称</li>
<li><code>L</code>：添加局部变量</li>
<li><code>Shift + M</code>：添加交叉引用注释</li>
</ul>
</li>
<li><h3 id="函数和结构："><a href="#函数和结构：" class="headerlink" title="函数和结构："></a><strong>函数和结构</strong>：</h3><ul>
<li><code>P</code>：创建函数</li>
<li><code>U</code>：将选定的区块定义为结构</li>
<li><code>Shift + F12</code>：查看函数的交叉引用</li>
<li><code>Ctrl + E</code>：查看函数的调用图</li>
</ul>
</li>
<li><h3 id="数据和字符串："><a href="#数据和字符串：" class="headerlink" title="数据和字符串："></a><strong>数据和字符串</strong>：</h3><ul>
<li><code>Shift + D</code>：定义数据</li>
<li><code>Shift + S</code>：定义字符串</li>
<li><code>Shift + B</code>：定义字节序列</li>
<li><code>Shift + X</code>：定义十六进制值</li>
</ul>
</li>
<li><h3 id="调试相关："><a href="#调试相关：" class="headerlink" title="调试相关："></a><strong>调试相关</strong>：</h3><ul>
<li><code>F7</code>：单步运行</li>
<li><code>F8</code>：步过</li>
<li><code>F9</code>：继续执行</li>
<li><code>Ctrl + F9</code>：暂停执行</li>
<li><code>Ctrl + Shift + F9</code>：终止调试</li>
</ul>
</li>
</ol>
<h1 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a>pwndbg</h1><p>gdb        &#x2F;&#x2F;执行文件<br>b main     &#x2F;&#x2F;动态调试main函数，或者某个地址<br>r          &#x2F;&#x2F;跑起来<br>ni        &#x2F;&#x2F;一步一步调试这个函数<br>n         &#x2F;&#x2F;执行<br>si        &#x2F;&#x2F;进入这个函数<br>cyclic -l ad   &#x2F;&#x2F;计算值ad之前的字符串长度<br>cyclic 200    &#x2F;&#x2F;生成200个垃圾字符<br>plt           &#x2F;&#x2F;查看调用哪些的函数<br>got           &#x2F;&#x2F;查看调用函数的具体地址<br>return         &#x2F;&#x2F;从子函数返回<br>x&#x2F;20gx 0x45622       &#x2F;&#x2F;查看地址的机械码<br>disass 0x7fff7e65       &#x2F;&#x2F;反汇编<br>backtrace            &#x2F;&#x2F;显示整个函数调用的栈情况</p>
<p>elf &#x3D; ELF(“.&#x2F;ret2syscall”)<br>      system_plt &#x3D; elf.plt[“system”]       &#x2F;&#x2F;查找system的地址<br>      binsh &#x3D; hex(next(elf.search(b”&#x2F;bin&#x2F;sh”)))   #pwntools自动找&#x2F;bin&#x2F;sh地址</p>
<h1 id="Pwntools"><a href="#Pwntools" class="headerlink" title="Pwntools"></a>Pwntools</h1><ol>
<li><h3 id="连接远程或本地进程："><a href="#连接远程或本地进程：" class="headerlink" title="连接远程或本地进程："></a><strong>连接远程或本地进程</strong>：</h3><ul>
<li><code>remote(host, port)</code>：连接到远程主机</li>
<li><code>process(executable)</code>：启动本地进程</li>
<li><code>tube.recv()</code>：接收数据</li>
<li><code>tube.send(data)</code>：发送数据</li>
</ul>
</li>
<li><h3 id="利用开发："><a href="#利用开发：" class="headerlink" title="利用开发："></a><strong>利用开发</strong>：</h3><ul>
<li><code>context.arch</code>：设置架构（如 “i386” 或 “amd64”）</li>
<li><code>asm(assembly_code)</code>：汇编代码</li>
<li><code>disasm(machine_code)</code>：反汇编机器码</li>
<li><code>ELF(filename)</code>：解析 ELF 文件</li>
<li><code>ROP()</code>：构建 ROP 链</li>
<li><code>p32(value)</code> 和 <code>p64(value)</code>：打包 32 位和 64 位数据</li>
</ul>
</li>
<li><h3 id="内存操作："><a href="#内存操作：" class="headerlink" title="内存操作："></a><strong>内存操作</strong>：</h3><ul>
<li><code>pack(address)</code>：将地址打包为字节串</li>
<li><code>unpack(bytestring)</code>：从字节串中解包地址</li>
</ul>
</li>
<li><h3 id="交互式-shell："><a href="#交互式-shell：" class="headerlink" title="交互式 shell："></a><strong>交互式 shell</strong>：</h3><ul>
<li><code>tube.interactive()</code>：切换到交互模式</li>
</ul>
</li>
<li><h3 id="文件操作："><a href="#文件操作：" class="headerlink" title="文件操作："></a><strong>文件操作</strong>：</h3><ul>
<li><code>open()</code>：打开文件</li>
<li><code>read()</code> 和 <code>write()</code>：读取和写入文件</li>
</ul>
</li>
<li><h3 id="各种辅助函数："><a href="#各种辅助函数：" class="headerlink" title="各种辅助函数："></a><strong>各种辅助函数</strong>：</h3><ul>
<li><code>cyclic(length)</code>：生成循环模式字符串</li>
<li><code>hexdump(data)</code>：以十六进制格式打印数据</li>
<li><code>which(filename)</code>：查找可执行文件的路径</li>
<li><code>log.info()</code>, <code>log.warning()</code>, <code>log.error()</code>：打印日志信息</li>
</ul>
</li>
</ol>
<h2 id="ROPgadget用法"><a href="#ROPgadget用法" class="headerlink" title="ROPgadget用法"></a>ROPgadget用法</h2><p>ROPgadget –binary 文件名 –only “pop|ret”  &#x2F;&#x2F;文件中的查找gadgets<br>ROPgadget –binary .&#x2F;7.exe –only “pop|ret” | grep “eax”    &#x2F;&#x2F;从pop、ret序列当中寻找其中的eax</p>
<p>ROPgadget –binary .&#x2F;7.exe –only “pop|ret” | grep “ebx” | grep “ecx” | grep “edx”      &#x2F;&#x2F; 从pop、ret序列当中寻找其中的ebx、ecx、dex</p>
<p>ROPgadget –binary .&#x2F;7.exe –string “&#x2F;bin&#x2F;sh”           &#x2F;&#x2F;找”&#x2F;bin&#x2F;sh”这个字符串的地址</p>
<p>ROPgadget –binary .&#x2F;7.exe –only “int”|grep “0x80”        &#x2F;&#x2F;int中断找”0x80”</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux太揪心</title>
    <url>/Astral.github.io/2024/01/13/Linux%E4%B8%8D%E5%AD%A6%E4%B8%8D%E8%A1%8C/</url>
    <content><![CDATA[<p>方式2 tmux<br>（既可以左右分屏，也可以上下分屏）<br>（1）安装：apt install screen 安装screen工具<br>（2）三个概念：</p>
<p>会话session ：一个tmux工作区会话，可以容纳多个窗口。<br>窗口window：可以容纳多个窗格<br>窗格pane：可以在窗口中分成多个窗格。</p>
<p>（3）窗格－基本操作：</p>
<p>输入tmux进入。<br>上下分屏：ctrl + b 再按 “<br>左右分屏：ctrl + b 再按 %<br>切换屏幕：ctrl + b 再按o<br>关闭一个终端：ctrl + b 再按x<br>上下分屏与左右分屏切换： ctrl + b 再按空格键<br>两个相邻的屏幕切换：ctrl+b,再按{或者}，一个是向前切换，一个是向后切换。<br>显示窗格标号：ctrl+b 再按 q。<br>9.ctrl+b后 ，再按 Ctrl+方向键 以1个单元格为单位移动边缘以调整当前面板大小<br>Ctrl+b后 ，再按Alt+方向键 以5个单元格为单位移动边缘以调整当前面板大小<br>Ctrl+b后按空格键 可以在默认面板布局中切换。<br>（4）窗口基本操作</p>
<p>创建一个新窗口ctrl+b后 再按 c。<br>关闭当前窗口 ctrl+b后再按x。<br>切换到上一个窗口 ctrl+b后再按p。<br>切换到下一个窗口 ctrl+b后再按n。<br>ctrl+b后再按 ! ，将当前窗格置于新窗口,即新建一个窗口,其仅包含当前窗格。<br>概览所有窗口。ctrl+b后，再按s。（上方会显示session列表，选择对应的session可展示对应windows概览）<br>（5）会话基本操作。<br>说明：linux终端可以开启多个会话，对于每个会话可以开启一个或多个tmux工作区。进入tmux工作区后可以进行切换。</p>
<p>显示所有会话。ctrl+b后，再按s<br>————————————————</p>
<pre><code>                        版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
</code></pre>
<p>原文链接：<a href="https://blog.csdn.net/weixin_41760342/article/details/115497636">https://blog.csdn.net/weixin_41760342/article/details/115497636</a></p>
]]></content>
      <categories>
        <category>Linux系统管理</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>每个人都是一座孤岛</title>
    <url>/Astral.github.io/2024/01/13/%E5%AD%A4%E5%B2%9B%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>随心</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言初识笔记</title>
    <url>/Astral.github.io/2024/01/06/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%88%9D%E8%AF%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>在x86-64架构的CPU中，rdi、rsi和rdx是通用寄存器，它们在函数调用和系统调用中扮演重要角色。</p>
<p>在Linux 64位系统中，函数参数通常通过寄存器传递，其中rdi、rsi、rdx、rcx、r8 和 r9 分别用于传递前6个整型参数。而在这些寄存器中，rdi 通常用于存储第一个参数，rsi 用于存储第二个参数，rdx 用于存储第三个参数。</p>
<p>举个例子，如果你在汇编中调用一个C语言函数，你可能会看到类似下面的代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">复制代码mov rdi, <span class="number">10</span>    ; 将<span class="number">10</span>赋值给rdi，作为第一个参数</span><br><span class="line">mov rsi, <span class="number">20</span>    ; 将<span class="number">20</span>赋值给rsi，作为第二个参数</span><br><span class="line">mov rdx, <span class="number">30</span>    ; 将<span class="number">30</span>赋值给rdx，作为第三个参数</span><br><span class="line">call some_function  ; 调用函数</span><br></pre></td></tr></table></figure>

<p>在这个例子中，rdi 存储第一个参数 10，rsi 存储第二个参数 20，rdx 存储第三个参数 30。当函数 some_function 被调用时，这些寄存器中的值将作为函数的参数传递进去。</p>
<p>总之，rdi、rsi 和 rdx 在函数调用和系统调用中通常用来传递参数，它们在调用过程中承担着非常重要的角色。</p>
]]></content>
      <categories>
        <category>程序语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记</title>
    <url>/Astral.github.io/2024/01/06/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python/</url>
    <content><![CDATA[<p>第一章：<br>        Hello World!!<br>         print(“Hello, World!”)</p>
<pre><code>     运行脚本
     $ python3 hello.py

    python保留字    
    &gt;&gt;&gt; keyword.kwlist
    [&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]   
    
    数字(Number)类型
    python中数字有四种类型：整数、布尔型、浮点数和复数。
    int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。
    bool (布尔), 如 True。
    float (浮点数), 如 1.23、3E-2
    complex (复数), 如 1 + 2j、 1.1 + 2.2j

    字符串(String)
    Python 中单引号 &#39; 和双引号 &quot; 使用完全相同。
    使用三引号(&#39;&#39;&#39; 或 &quot;&quot;&quot;)可以指定一个多行字符串。
    转义符 \。
    反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 如 r&quot;this is a line with \n&quot; 则 \n 会显示，并不是换行。
    按字面意义级联字符串，如 &quot;this &quot; &quot;is &quot; &quot;string&quot; 会被自动转换为 this is string。
    字符串可以用 + 运算符连接在一起，用 * 运算符重复。
    Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。
    Python 中的字符串不能改变。
    Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。
    字符串的截取的语法格式如下：变量[头下标:尾下标:步长]
    word = &#39;字符串&#39;
    sentence = &quot;这是一个句子。&quot;
    paragraph = &quot;&quot;&quot;这是一个段落，
    可以由多行组成&quot;&quot;&quot;
    
    示例
    str=&#39;123456789&#39;
    print(str)                 # 输出字符串
    print(str[0:-1])           # 输出第一个到倒数第二个的所有字符
    print(str[0])              # 输出字符串第一个字符
    print(str[2:5])            # 输出从第三个开始到第六个的字符（不包含）
    print(str[2:])             # 输出从第三个开始后的所有字符
    print(str[1:5:2])          # 输出从第二个开始到第五个且每隔一个的字符（步长为2）
    print(str * 2)             # 输出字符串两次
    print(str + &#39;你好&#39;)         # 连接字符串
    
    print(&#39;------------------------------&#39;)
    
    print(&#39;hello\nrunoob&#39;)      # 使用反斜杠(\)+n转义特殊字符
    print(r&#39;hello\nrunoob&#39;)     # 在字符串前面添加一个 r，表示原始字符串，不会发生转义

    print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=&quot;&quot;：        
    x=&quot;a&quot;
    y=&quot;b&quot;
    # 换行输出
    print( x )
    print( y )
    print(&#39;---------&#39;)
    # 不换行输出
    print( x, end=&quot; &quot; )
    print( y, end=&quot; &quot; )
    print()
    以上实例执行结果为：
    a
    b
    ---------
    a b

    import 与 from...import
    在 python 用 import 或者 from...import 来导入相应的模块。
    from...import 的语法格式如下：
    将整个模块(somemodule)导入，格式为： import somemodule
    从某个模块中导入某个函数,格式为： from somemodule import somefunction
    从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc
    将某个模块中的全部函数导入，格式为： from somemodule import *
    导入 sys 模块
    import sys
    print(&#39;================Python import mode==========================&#39;)
    print (&#39;命令行参数为:&#39;)
    for i in sys.argv:
        print (i)
    print (&#39;\n python 路径为&#39;,sys.path)
    导入 sys 模块的 argv,path 成员
    from sys import argv,path  #  导入特定的成员
    
    print(&#39;================python from import===================================&#39;)
    print(&#39;path:&#39;,path) # 因为已经导入path成员，所以此处引用时不需要加sys.path

    Python3 基本数据类型
    Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。

    在 Python 中，变量就是变量，它没有类型，我们所说的&quot;类型&quot;是变量所指的内存中对象的类型。

    等号（=）用来给变量赋值。

    等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：

    实例
    counter = 100          # 整型变量
    miles   = 1000.0       # 浮点型变量
    name    = &quot;runoob&quot;     # 字符串
    print (counter)
    print (miles)
    print (name)
    运行实例 »
    执行以上程序会输出如下结果：
    100
    1000.0
    runoob

    
</code></pre>
<p>第二章：变量和基本数据类型<br>         a &#x3D; 10<br>         b &#x3D; 3.14<br>         c &#x3D; “Hello, World!”<br>第三章：流程控制<br>         if a &gt;&#x3D; 0:<br>             print(“a是正数”)<br>         elif a &lt; 0:<br>             print(“a是负数”)<br>         else:<br>             print(“a是零”)<br>第四章：函数和数组<br>         def add(a, b):<br>             return a + b<br>         arr &#x3D; [1, 2, 3, 4, 5]<br>         print(arr[0])  # 输出第一个元素<br>第五章：面向对象编程<br>         class Person:<br>             def <strong>init</strong>(self, name):<br>                 self.name &#x3D; name<br>             def say_hello(self):<br>                 print(“Hello, “ + self.name + “!”)<br>         person &#x3D; Person(“Alice”)<br>         person.say_hello()<br>第六章：异常处理<br>         try:<br>             # 可能会引发异常的代码<br>         except Exception as e:<br>             # 处理异常的代码<br>             print(“发生异常：” + str(e))<br>第七章：文件操作<br>         file &#x3D; open(“file.txt”, “w”)<br>         file.write(“Hello, World!”)<br>         file.close()<br>第八章：图形用户界面<br>         import tkinter as tk</p>
<pre><code>     def say_hello():
         print(&quot;Hello, World!&quot;)
     
     window = tk.Tk()
     button = tk.Button(window, text=&quot;点击我&quot;, command=say_hello)
     button.pack()
     window.mainloop()
</code></pre>
<p>第九章：数据库操作<br>         import sqlite3</p>
<pre><code>     conn = sqlite3.connect(&quot;database.db&quot;)
     cursor = conn.cursor()
     cursor.execute(&quot;CREATE TABLE IF NOT EXISTS students (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)&quot;)
     cursor.execute(&quot;INSERT INTO students (name, age) VALUES (?, ?)&quot;, (&quot;Alice&quot;, 20))
     conn.commit()
     cursor.execute(&quot;SELECT * FROM students&quot;)
     for row in cursor.fetchall():
         print(row)
     conn.close()
</code></pre>
<p>第十章：网络编程<br>         import socket</p>
<pre><code>     server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
     server_socket.bind((&quot;localhost&quot;, 8080))
     server_socket.listen(5)
     
     while True:
         client_socket, addr = server_socket.accept()
         request = client_socket.recv(1024).decode()
         response = &quot;Hello, World!&quot;
         client_socket.send(response.encode())
         client_socket.close()
     
     server_socket.close()
</code></pre>
<p>第十一章：图形用户界面（GUI）<br>         import tkinter as tk</p>
<pre><code>     def say_hello():
         label.config(text=&quot;Hello, World!&quot;)
     
     window = tk.Tk()
     window.title(&quot;My GUI&quot;)
     
     label = tk.Label(window, text=&quot;Hello, World!&quot;)
     label.pack()
     
     button = tk.Button(window, text=&quot;Say Hello&quot;, command=say_hello)
     button.pack()
     
     window.mainloop()
</code></pre>
<p>第十二章：数据可视化<br>         import matplotlib.pyplot as plt</p>
<pre><code>     x = [1, 2, 3, 4, 5]
     y = [1, 4, 9, 16, 25]
     
     plt.plot(x, y)
     plt.xlabel(&#39;x&#39;)
     plt.ylabel(&#39;y&#39;)
     plt.title(&#39;Square Numbers&#39;)
     plt.show()
</code></pre>
<p>第十三章：数据库编程<br>         import sqlite3</p>
<pre><code>     conn = sqlite3.connect(&#39;example.db&#39;)
     cursor = conn.cursor()
     
     cursor.execute(&#39;CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT)&#39;)
     cursor.execute(&#39;INSERT INTO users (name) VALUES (?)&#39;, (&#39;John Doe&#39;,))
     cursor.execute(&#39;SELECT * FROM users&#39;)
     result = cursor.fetchall()
     
     for row in result:
         print(row)
     
     conn.commit()
     conn.close()
</code></pre>
<p>第十四章：机器学习<br>         import numpy as np<br>         from sklearn.datasets import load_iris<br>         from sklearn.model_selection import train_test_split<br>         from sklearn.neighbors import KNeighborsClassifier<br>         from sklearn.metrics import accuracy_score</p>
<pre><code>     iris = load_iris()
     X = iris.data
     y = iris.target
     
     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
     knn = KNeighborsClassifier(n_neighbors=3)
     knn.fit(X_train, y_train)
     
     y_pred = knn.predict(X_test)
     accuracy = accuracy_score(y_test, y_pred)
     print(&quot;Accuracy:&quot;, accuracy)
</code></pre>
<p>第十五章：自然语言处理<br>         import nltk<br>         from nltk.tokenize import word_tokenize<br>         from nltk.stem import PorterStemmer<br>         from nltk.corpus import stopwords</p>
<pre><code>     text = &quot;This is a sample sentence, showing off the stop words filtration.&quot;
     
     # 分词
     tokens = word_tokenize(text)
     
     # 词干提取
     stemmer = PorterStemmer()
     stemmed_tokens = [stemmer.stem(token) for token in tokens]
     
     # 去除停用词
     stop_words = set(stopwords.words(&#39;english&#39;))
     filtered_tokens = [token for token in stemmed_tokens if token.isalpha() and token not in stop_words]
     
     print(filtered_tokens) 
</code></pre>
<p>第十六章：深度学习<br>         import tensorflow as tf</p>
<pre><code>     # 创建一个简单的神经网络模型
     model = tf.keras.Sequential([
         tf.keras.layers.Dense(10, activation=&#39;relu&#39;, input_shape=(784,)),
         tf.keras.layers.Dense(10, activation=&#39;softmax&#39;)
     ])
     
     # 编译模型
     model.compile(optimizer=&#39;adam&#39;,
                  loss=&#39;categorical_crossentropy&#39;,
                  metrics=[&#39;accuracy&#39;])
     
     # 训练模型
     model.fit(train_images, train_labels, epochs=5)
     
     # 使用模型进行预测
     test_loss, test_acc = model.evaluate(test_images, test_labels)
     print(&#39;Test accuracy:&#39;, test_acc)
     
     # 进行预测
     predictions = model.predict(test_images)
     
     # 打印预测结果
     print(predictions)
     
</code></pre>
<p>第十七章：卷积神经网络<br>         import tensorflow as tf</p>
<pre><code>     # 创建一个简单的卷积神经网络模型
     model = tf.keras.Sequential([
         tf.keras.layers.Conv2D(32, (3,3), activation=&#39;relu&#39;, input_shape=(28, 28, 1)),
         tf.keras.layers.MaxPooling2D((2, 2)),
         tf.keras.layers.Flatten(),
         tf.keras.layers.Dense(128, activation=&#39;relu&#39;),
         tf.keras.layers.Dense(10, activation=&#39;softmax&#39;)
     ])
     
     # 编译模型
     model.compile(optimizer=&#39;adam&#39;,
                  loss=&#39;categorical_crossentropy&#39;,
                  metrics=[&#39;accuracy&#39;])
     
     # 训练模型
     model.fit(train_images, train_labels, epochs=5)
     
     # 使用模型进行预测
     test_loss, test_acc = model.evaluate(test_images, test_labels)
     print(&#39;Test accuracy:&#39;, test_acc)
     
     # 进行预测
     predictions = model.predict(test_images)
     
     # 打印预测结果
     print(predictions)             
     # 编写一个Python程序，使用TensorFlow库来构建一个卷积神经网络模型。该模型应该能够对MNIST数据集进行分类，并输出预测结果。
</code></pre>
<p>import tensorflow as tf</p>
<h1 id="加载MNIST数据集"><a href="#加载MNIST数据集" class="headerlink" title="加载MNIST数据集"></a>加载MNIST数据集</h1><p>mnist &#x3D; tf.keras.datasets.mnist<br>(train_images, train_labels), (test_images, test_labels) &#x3D; mnist.load_data()</p>
<h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><p>train_images &#x3D; train_images &#x2F; 255.0<br>test_images &#x3D; test_images &#x2F; 255.0</p>
<h1 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h1><p>model &#x3D; tf.keras.models.Sequential([<br>    tf.keras.layers.Conv2D(32, (3, 3), activation&#x3D;’relu’, input_shape&#x3D;(28, 28, 1)),<br>    tf.keras.layers.MaxPooling2D((2, 2)),<br>    tf.keras.layers.Flatten(),<br>    tf.keras.layers.Dense(128, activation&#x3D;’relu’),<br>    tf.keras.layers.Dense(10, activation&#x3D;’softmax’)<br>])</p>
<h1 id="编译模型"><a href="#编译模型" class="headerlink" title="编译模型"></a>编译模型</h1><p>model.compile(optimizer&#x3D;’adam’,<br>              loss&#x3D;’sparse_categorical_crossentropy’,<br>              metrics&#x3D;[‘accuracy’])</p>
<h1 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h1><p>model.fit(train_images, train_labels, epochs&#x3D;5)</p>
<h1 id="使用模型进行预测"><a href="#使用模型进行预测" class="headerlink" title="使用模型进行预测"></a>使用模型进行预测</h1><p>test_loss, test_acc &#x3D; model.evaluate(test_images, test_labels)<br>print(‘Test accuracy:’, test_acc)</p>
<h1 id="进行预测"><a href="#进行预测" class="headerlink" title="进行预测"></a>进行预测</h1><p>predictions &#x3D; model.predict(test_images)</p>
<h1 id="打印预测结果"><a href="#打印预测结果" class="headerlink" title="打印预测结果"></a>打印预测结果</h1><p>print(predictions)</p>
<h1 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h1><p>model.save(‘mnist_model.h5’)</p>
]]></content>
      <categories>
        <category>程序语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络原理</title>
    <url>/Astral.github.io/2024/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机网络原理</tag>
      </tags>
  </entry>
</search>
